"""
M√≥dulo de recomendaciones para Validaci√≥n Cruzada - Anal√≠tica Farma
Contiene funciones para mostrar recomendaciones de mejora espec√≠ficas para modelos y la industria farmac√©utica.
"""

import streamlit as st


def mostrar_recomendaciones_mejora(diagnostico, modelo, tipo_problema):
    """Muestra recomendaciones espec√≠ficas para mejorar el modelo."""
    st.subheader("üí° Recomendaciones para Mejora")
    
    # Obtener recomendaciones del resultado del an√°lisis (desde el evaluador)
    recomendaciones_del_analisis = modelo.get('recomendaciones', [])
    
    # Tambi√©n obtener las del diagn√≥stico si est√°n disponibles
    recomendaciones_diagnostico = diagnostico.get('recomendaciones', [])
    
    # Combinar todas las recomendaciones disponibles
    todas_recomendaciones = recomendaciones_del_analisis + recomendaciones_diagnostico
    
    # Determinar el tipo de problema basado en el diagn√≥stico
    overfitting = diagnostico.get('overfitting', 'desconocido')
    underfitting = diagnostico.get('underfitting', 'desconocido')
    
    # Mostrar recomendaciones en categor√≠as
    if overfitting == 'posible':
        st.markdown("### üî• Estrategias para Reducir Overfitting")
        tipo_diag = 'overfitting'
    elif underfitting == 'posible':
        st.markdown("### üìà Estrategias para Reducir Underfitting")
        tipo_diag = 'underfitting'
    else:
        st.markdown("### ‚ú® Estrategias para Optimizaci√≥n Adicional")
        tipo_diag = 'balanceado'
    
    # Mostrar recomendaciones b√°sicas si est√°n disponibles
    if todas_recomendaciones:
        st.markdown("#### Recomendaciones espec√≠ficas:")
        for i, recomendacion in enumerate(todas_recomendaciones, 1):
            with st.expander(f"üí° Recomendaci√≥n {i}", expanded=i <= 3):
                st.markdown(recomendacion)
    else:
        st.info("üìã No hay recomendaciones espec√≠ficas disponibles")
        # Mostrar recomendaciones gen√©ricas basadas en el diagn√≥stico
        mostrar_recomendaciones_genericas(tipo_diag)
    
    # Recomendaciones adicionales para la industria farmac√©utica
    mostrar_recomendaciones_industria(tipo_diag)


def mostrar_recomendaciones_genericas(tipo_diag):
    """Muestra recomendaciones gen√©ricas basadas en el tipo de diagn√≥stico."""
    if tipo_diag == 'overfitting':
        recomendaciones_genericas = [
            "üîÑ Considere usar regularizaci√≥n (L1/L2)",
            "üìä Aumente el tama√±o del dataset de entrenamiento", 
            "üå≥ Reduzca la complejidad del modelo",
            "‚úÇÔ∏è Aplique t√©cnicas de feature selection"
        ]
    elif tipo_diag == 'underfitting':
        recomendaciones_genericas = [
            "üîß Aumente la complejidad del modelo",
            "üéØ Agregue m√°s caracter√≠sticas relevantes",
            "‚öôÔ∏è Ajuste los hiperpar√°metros", 
            "üîç Verifique la calidad de los datos"
        ]
    else:
        recomendaciones_genericas = [
            "‚úÖ El modelo muestra un comportamiento balanceado",
            "üîç Considere realizar ajuste fino de hiperpar√°metros",
            "üìà Monitoree el rendimiento en producci√≥n",
            "üéØ Eval√∫e la adici√≥n de caracter√≠sticas adicionales"
        ]
    
    st.markdown("#### Recomendaciones generales:")
    for i, rec in enumerate(recomendaciones_genericas, 1):
        with st.expander(f"üéØ Recomendaci√≥n general {i}", expanded=False):
            st.markdown(rec)


def mostrar_recomendaciones_industria(tipo_problema):
    """Muestra recomendaciones espec√≠ficas para la industria farmac√©utica."""
    with st.expander("üè≠ Consideraciones para la Industria Farmac√©utica", expanded=False):
        st.markdown("""
        ### Aplicaci√≥n en Procesos Biotecnol√≥gicos
        
        #### Para Overfitting:
        - **üìã Documentaci√≥n**: Registre todas las correcciones en el batch record
        - **üîÑ Validaci√≥n cruzada**: Implemente validaci√≥n con datos de m√∫ltiples lotes
        - **üìä Monitoreo continuo**: Establezca alertas para drift del modelo en producci√≥n
        - **üë• Revisi√≥n por pares**: Involucre a QA en la validaci√≥n del modelo
        
        #### Para Underfitting:
        - **üî¨ Revisi√≥n de variables**: Incluya m√°s CPPs (Critical Process Parameters)
        - **üìà Aumento de datos**: Considere datos hist√≥ricos de sitios similares
        - **üß™ Experimentos dirigidos**: Planifique experimentos para llenar gaps de datos
        - **üéØ Refinamiento de objetivos**: Revise si los KPIs est√°n bien definidos
        
        #### Para Modelos Balanceados:
        - **‚úÖ Validaci√≥n final**: Proceda con validaci√≥n en lotes piloto
        - **üìù Documentaci√≥n GMP**: Prepare documentaci√≥n para transferencia
        - **üîç Monitoreo de performance**: Implemente sistema de seguimiento continuo
        - **üéì Entrenamiento**: Capacite al personal en el uso del modelo
        """)
