"""
M√≥dulo de presentaci√≥n de recomendaciones para Validaci√≥n Cruzada - Anal√≠tica Farma
Contiene √∫nicamente funciones de UI para mostrar recomendaciones generadas por la capa de modelos.
"""

import streamlit as st
from src.modelos.recomendador import generar_recomendaciones_completas


def mostrar_recomendaciones_mejora(diagnostico, modelo, tipo_problema):
    """Muestra recomendaciones espec√≠ficas para mejorar el modelo."""
    st.subheader("üí° Recomendaciones para Mejora")
    
    # Generar todas las recomendaciones usando la capa de modelos
    recomendaciones_completas = generar_recomendaciones_completas(diagnostico, modelo, tipo_problema)
    
    # Verificar si hay error
    if 'error' in recomendaciones_completas:
        st.error(f"‚ùå {recomendaciones_completas['error']}")
        return
    
    # Obtener informaci√≥n del diagn√≥stico
    tipo_diag = recomendaciones_completas.get('tipo_diagnostico', 'balanceado')
    
    # Mostrar t√≠tulo seg√∫n el tipo de diagn√≥stico
    if tipo_diag == 'overfitting':
        st.markdown("### üî• Estrategias para Reducir Overfitting")
    elif tipo_diag == 'underfitting':
        st.markdown("### üìà Estrategias para Reducir Underfitting")
    else:
        st.markdown("### ‚ú® Estrategias para Optimizaci√≥n Adicional")
    
    # Mostrar recomendaciones espec√≠ficas del an√°lisis
    recomendaciones_especificas = recomendaciones_completas.get('recomendaciones_especificas', [])
    if recomendaciones_especificas:
        st.markdown("#### Recomendaciones espec√≠ficas del an√°lisis:")
        for i, recomendacion in enumerate(recomendaciones_especificas, 1):
            with st.expander(f"üí° Recomendaci√≥n espec√≠fica {i}", expanded=i <= 3):
                st.markdown(recomendacion)
    
    # Mostrar recomendaciones gen√©ricas
    recomendaciones_genericas = recomendaciones_completas.get('recomendaciones_genericas', [])
    if recomendaciones_genericas:
        st.markdown("#### Recomendaciones generales:")
        for i, rec in enumerate(recomendaciones_genericas, 1):
            with st.expander(f"üéØ Recomendaci√≥n general {i}", expanded=False):
                st.markdown(rec)
    
    # Mostrar recomendaciones para la industria farmac√©utica
    mostrar_recomendaciones_industria_ui(recomendaciones_completas)


def mostrar_recomendaciones_industria_ui(recomendaciones_completas):
    """Presenta las recomendaciones espec√≠ficas para la industria farmac√©utica."""
    recomendaciones_industria = recomendaciones_completas.get('recomendaciones_industria', {})
    tipo_diag = recomendaciones_completas.get('tipo_diagnostico', 'general')
    
    with st.expander("üè≠ Consideraciones para la Industria Farmac√©utica", expanded=False):
        st.markdown("### Aplicaci√≥n en Procesos Biotecnol√≥gicos")
        
        # Mostrar recomendaciones espec√≠ficas del tipo de diagn√≥stico
        if tipo_diag in recomendaciones_industria:
            st.markdown(f"#### Para {tipo_diag.title()}:")
            recomendaciones_especificas = recomendaciones_industria[tipo_diag]
            for rec in recomendaciones_especificas:
                st.markdown(f"- {rec}")
        
        # Mostrar recomendaciones generales de la industria
        if 'general' in recomendaciones_industria:
            st.markdown("#### Consideraciones Generales:")
            recomendaciones_generales = recomendaciones_industria['general']
            for rec in recomendaciones_generales:
                st.markdown(f"- {rec}")
        
        # Informaci√≥n adicional para compliance
        st.markdown("""
        ---
        #### ÔøΩ Checklist de Compliance:
        - ‚úÖ Documentaci√≥n completa en batch records
        - ‚úÖ Validaci√≥n seg√∫n est√°ndares FDA/EMA  
        - ‚úÖ Trazabilidad completa de cambios
        - ‚úÖ Revisi√≥n y aprobaci√≥n por QA
        - ‚úÖ Plan de mantenimiento del modelo
        - ‚úÖ Procedimientos de respaldo y recuperaci√≥n
        """)
