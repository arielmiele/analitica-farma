"""
M√≥dulo para la recomendaci√≥n del mejor modelo de machine learning.
Incluye funciones para generar recomendaciones espec√≠ficas basadas en diagn√≥sticos.
"""
from datetime import datetime
from typing import Dict, List
from src.audit.logger import log_audit

def recomendar_mejor_modelo(
    benchmarking: Dict,
    criterio: str,
    id_sesion: str,
    usuario: str
) -> Dict:
    """
    Recomienda el mejor modelo basado en los resultados del benchmarking.
    
    Args:
        benchmarking (Dict): Resultados del benchmarking con modelos exitosos
        criterio (str): Criterio para seleccionar el mejor modelo ('accuracy', 'f1', 'r2', 'rmse', 'auto')
        id_sesion (str): ID de la sesi√≥n actual para trazabilidad
        usuario (str): Usuario que ejecuta la operaci√≥n
    Returns:
        Dict: Informaci√≥n del modelo recomendado
    """
    try:
        if not benchmarking['modelos_exitosos']:
            return {"error": "No hay modelos exitosos en el benchmarking."}
        # Si el criterio es 'auto', usar el criterio adecuado seg√∫n el tipo de problema
        if criterio == 'auto':
            if benchmarking['tipo_problema'] == 'clasificacion':
                criterio = 'accuracy'
            else:
                criterio = 'r2'
        # Ordenar modelos seg√∫n criterio seleccionado
        if criterio in ['accuracy', 'precision', 'recall', 'f1', 'r2']:
            modelos_ordenados = sorted(
                benchmarking['modelos_exitosos'],
                key=lambda x: x['metricas'].get(criterio, 0),
                reverse=True
            )
        else:  # 'mse', 'rmse', 'mae'
            modelos_ordenados = sorted(
                benchmarking['modelos_exitosos'],
                key=lambda x: x['metricas'].get(criterio, float('inf'))
            )
        modelo_recomendado = modelos_ordenados[0]
        log_audit(
            id_sesion,
            usuario,
            "RECOMENDACION_MODELO",
            "recomendador",
            f"Recomendaci√≥n de modelo con criterio: {criterio}"
        )
        return {
            "modelo_recomendado": modelo_recomendado,
            "criterio_usado": criterio,
            "tipo_problema": benchmarking['tipo_problema'],
            "variable_objetivo": benchmarking['variable_objetivo'],
            "total_modelos_evaluados": len(benchmarking['modelos_exitosos']),
            "timestamp": datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        }
    except Exception as e:
        log_audit(
            id_sesion,
            usuario,
            "ERROR_RECOMENDAR_MODELO",
            "recomendador",
            f"Error al recomendar modelo: {str(e)}"
        )
        return {"error": str(e)}

def guardar_modelo_seleccionado(
    nombre_modelo: str,
    benchmarking: Dict,
    comentarios: str,
    id_sesion: str,
    usuario: str
) -> Dict:
    """
    Guarda el modelo seleccionado por el usuario (solo auditor√≠a, no base de datos).
    
    Args:
        nombre_modelo (str): Nombre del modelo seleccionado
        benchmarking (Dict): Resultados del benchmarking
        comentarios (str): Comentarios sobre la selecci√≥n
        id_sesion (str): ID de la sesi√≥n actual para trazabilidad
        usuario (str): Usuario que ejecuta la operaci√≥n
    Returns:
        Dict: Resultado de la operaci√≥n
    """
    try:
        log_audit(
            id_sesion,
            usuario,
            "SELECCION_MODELO",
            "recomendador",
            f"Modelo seleccionado: {nombre_modelo}. Comentarios: {comentarios}"
        )
        return {
            "exito": True,
            "mensaje": f"Modelo '{nombre_modelo}' seleccionado correctamente.",
            "timestamp": datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        }
    except Exception as e:
        log_audit(
            id_sesion,
            usuario,
            "ERROR_GUARDAR_MODELO",
            "recomendador",
            f"Error al guardar modelo seleccionado: {str(e)}"
        )
        return {
            "exito": False,
            "error": str(e)
        }

def generar_recomendaciones_diagnostico(tipo_diag: str) -> List[str]:
    """
    Genera recomendaciones gen√©ricas basadas en el tipo de diagn√≥stico.
    
    Args:
        tipo_diag: Tipo de diagn√≥stico ('overfitting', 'underfitting', 'balanceado')
        
    Returns:
        List[str]: Lista de recomendaciones
    """
    if tipo_diag == 'overfitting':
        return [
            "üîÑ Considere usar regularizaci√≥n (L1/L2)",
            "üìä Aumente el tama√±o del dataset de entrenamiento", 
            "üå≥ Reduzca la complejidad del modelo",
            "‚úÇÔ∏è Aplique t√©cnicas de feature selection",
            "üìà Implemente early stopping durante el entrenamiento",
            "üîÄ Use t√©cnicas de data augmentation si es apropiado",
            "üë• Considere ensemble methods para reducir varianza"
        ]
    elif tipo_diag == 'underfitting':
        return [
            "üîß Aumente la complejidad del modelo",
            "üéØ Agregue m√°s caracter√≠sticas relevantes",
            "‚öôÔ∏è Ajuste los hiperpar√°metros", 
            "üîç Verifique la calidad de los datos",
            "üìä Considere feature engineering m√°s sofisticado",
            "üßÆ Pruebe modelos m√°s complejos (ensemble, neural networks)",
            "üìà Aumente el n√∫mero de iteraciones de entrenamiento"
        ]
    else:
        return [
            "‚úÖ El modelo muestra un comportamiento balanceado",
            "üîç Considere realizar ajuste fino de hiperpar√°metros",
            "üìà Monitoree el rendimiento en producci√≥n",
            "üéØ Eval√∫e la adici√≥n de caracter√≠sticas adicionales",
            "üîß Implemente validaci√≥n A/B en producci√≥n",
            "üìä Configure alertas para model drift",
            "üéì Prepare documentaci√≥n para transferencia a producci√≥n"
        ]

def generar_recomendaciones_industria(tipo_problema: str) -> Dict[str, List[str]]:
    """
    Genera recomendaciones espec√≠ficas para la industria farmac√©utica.
    
    Args:
        tipo_problema: Tipo de problema/diagn√≥stico
        
    Returns:
        Dict: Recomendaciones categorizadas para la industria
    """
    return {
        "overfitting": [
            "üìã Documentaci√≥n: Registre todas las correcciones en el batch record",
            "üîÑ Validaci√≥n cruzada: Implemente validaci√≥n con datos de m√∫ltiples lotes",
            "üìä Monitoreo continuo: Establezca alertas para drift del modelo en producci√≥n",
            "üë• Revisi√≥n por pares: Involucre a QA en la validaci√≥n del modelo",
            "üî¨ Compliance: Aseg√∫rese de cumplir con regulaciones FDA/EMA",
            "üìà Trazabilidad: Mantenga hist√≥rico completo de cambios de modelo"
        ],
        "underfitting": [
            "üî¨ Revisi√≥n de variables: Inclua m√°s CPPs (Critical Process Parameters)",
            "üìà Aumento de datos: Considere datos hist√≥ricos de sitios similares",
            "üß™ Experimentos dirigidos: Planifique experimentos para llenar gaps de datos",
            "üéØ Refinamiento de objetivos: Revise si los KPIs est√°n bien definidos",
            "üìä An√°lisis de riesgo: Eval√∫e impacto de predicciones incorrectas",
            "üîß Calibraci√≥n: Implemente procedimientos de calibraci√≥n de equipos"
        ],
        "balanceado": [
            "‚úÖ Validaci√≥n final: Proceda con validaci√≥n en lotes piloto",
            "üìù Documentaci√≥n GMP: Prepare documentaci√≥n para transferencia",
            "üîç Monitoreo de performance: Implemente sistema de seguimiento continuo",
            "üéì Entrenamiento: Capacite al personal en el uso del modelo",
            "üìã SOPs: Desarrolle procedimientos est√°ndar de operaci√≥n",
            "üîÑ Mantenimiento: Establezca rutinas de mantenimiento del modelo"
        ],
        "general": [
            "üè≠ Validaci√≥n de proceso: Asegure que el modelo respalde controles de proceso",
            "üìä Reportes regulatorios: Configure generaci√≥n autom√°tica de reportes",
            "üîí Seguridad de datos: Implemente controles de acceso robustos",
            "üéØ ROI: Monitoree retorno de inversi√≥n del modelo implementado"
        ]
    }

def generar_recomendaciones_completas(diagnostico: Dict, modelo: Dict, tipo_problema: str, id_sesion: str, usuario: str) -> Dict:
    """
    Genera un conjunto completo de recomendaciones basadas en el diagn√≥stico del modelo.
    
    Args:
        diagnostico: Diccionario con informaci√≥n del diagn√≥stico
        modelo: Informaci√≥n del modelo
        tipo_problema: Tipo de problema ('clasificacion', 'regresion')
        id_sesion (str): ID de la sesi√≥n actual para trazabilidad
        usuario (str): Usuario que ejecuta la operaci√≥n
    Returns:
        Dict: Recomendaciones completas organizadas por categor√≠a
    """
    try:
        overfitting = diagnostico.get('overfitting', 'desconocido')
        underfitting = diagnostico.get('underfitting', 'desconocido')
        if overfitting == 'posible':
            tipo_diag = 'overfitting'
        elif underfitting == 'posible':
            tipo_diag = 'underfitting'
        else:
            tipo_diag = 'balanceado'
        recomendaciones_del_analisis = modelo.get('recomendaciones', [])
        recomendaciones_diagnostico = diagnostico.get('recomendaciones', [])
        recomendaciones_genericas = generar_recomendaciones_diagnostico(tipo_diag)
        recomendaciones_industria = generar_recomendaciones_industria(tipo_diag)
        log_audit(
            id_sesion,
            usuario,
            "GENERAR_RECOMENDACIONES",
            "recomendador",
            f"Recomendaciones generadas para tipo_diagnostico: {tipo_diag}"
        )
        return {
            "tipo_diagnostico": tipo_diag,
            "recomendaciones_especificas": recomendaciones_del_analisis + recomendaciones_diagnostico,
            "recomendaciones_genericas": recomendaciones_genericas,
            "recomendaciones_industria": recomendaciones_industria,
            "contexto": {
                "nombre_modelo": modelo.get('nombre', 'Modelo'),
                "tipo_problema": tipo_problema,
                "overfitting": overfitting,
                "underfitting": underfitting
            }
        }
    except Exception as e:
        log_audit(
            id_sesion,
            usuario,
            "ERROR_GENERAR_RECOMENDACIONES",
            "recomendador",
            f"Error al generar recomendaciones: {str(e)}"
        )
        return {
            "error": f"Error al generar recomendaciones: {str(e)}",
            "tipo_diagnostico": "error",
            "recomendaciones_especificas": [],
            "recomendaciones_genericas": [],
            "recomendaciones_industria": {},
            "contexto": {}
        }
